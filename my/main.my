#!/usr/bin/mythryl
# NOTE:  This script assumes that it will be run from the same directory it is found in.

# Does load order matter?
# What happens when one library has requirements from another?
load "main.lib";

{
# TODO:  Trap exceptions for file operations.  Determine what other functions have exceptions.

# --

verbose =  REF TRUE;

# The setup for user variables.
source_directory  = REF "";
target_directory  = REF "";
header            = REF "";
footer            = REF "";
site_name         = REF "";
site_tagline      = REF "";
site_url          = REF "";
counter_code      = REF "";
copyright         = REF "";

# --

# FIXME Windows:  I need some sort of __SEPARATOR__ variable, which understands "/" on Linux, and "\" on Windows.
separator = REF "\\/";



# ---
# ---  Actual programming
# ---

# In source directory
#   check if the equivalent file exists in the target directory.
#   If no, re-create it.

# FIXME:  Sanity checking is impossible in this manner, because the initial "if ( winix::etc" is given an invalid directory then it'll just die then and there without passing false.  What the fuck.
# (update) this is probably an issue of trapping an error.  now that I know how, it should be easy enough to do.
# TODO:  Proper sanity-checking.
#        How would I stop script processing if the checking finds a critical error?
fun sanity_check( _: Void ):   Void = {
  if ( winix::file::is_directory( *source_directory ) == FALSE )
    printf "Directory does not exist:  \"%s\"\n"  *source_directory;
    # Make it?
  fi;
};
# sanity_check();


project::read_configuration( "compiled-website.config" );

project::rebuild(
  *source_directory + "sandbox.asc",
  *target_directory + "sandbox.html"
);


project::rebuild(
  *source_directory + "index.asc",
  *target_directory + "index.html"
);


test::test_all_tests();
general::test_all_tests();
project::test_all_tests();

};
