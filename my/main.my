
# --
# --  Library-candidate functions, general
# --

# TODO:  Figure out libraries / using multiple files for a project.  See `random-mythryl/multi-file-test/`

fun check_directory( string: String ): Bool
    =
{
  directory_list =  dir::entries''( "." );
  # TODO:  Is it necessary to sort dir::entries  ?
  directory_list =  strsort( directory_list );
  current_directory =  head( directory_list );
  string == current_directory;
};

fun test_check_directory( _: Void ): Void
    =
{
  dir =  "/mnt/ssd/mythryl/git/compiled-website/.";
  result =  check_directory( dir );
  if    result
        printf "yes\n";
  else  printf "no\n";
  fi;
};

# test_check_directory();



# TODO:  Only display the current directory's name.  (separate function?)
fun get_current_directory( _: Void ): String
    =
{
  directory_list =  dir::entries''( "." );
  # TODO:  Is it necessary to sort dir::entries  ?
  directory_list =  strsort( directory_list );
  head( directory_list );
};

fun test_get_current_directory( _: Void ): Void
    =
{
  result =  get_current_directory();
  printf "%s\n" result;
};

# test_get_current_directory();



# --
# --  Library-candidate functions, project-specific
# --



# ---
# ---  Actual programming
# ---

fun read_print( filename: String ): Void
    =
{
  # Read from a source file.
  # http://mythryl.org/my-File.html
  # http://mythryl.org/my-Read_a_text_file.html
  if    ( exists( filename ) )
        stream =  open_for_read( filename );
        # TODO:  Can I read it?
        # can_read : (Input_Stream , Int) -> Null_Or(Int );
        list =  read_lines( stream );
        apply printf "%s\n" list;
  fi;
};
fun test_read_print( _: Void ): Void
    =
{
  read_print( "compiled-website.txt" );
};
# test_read_print();


# Write to a target file.
# http://mythryl.org/my-File.html
# http://mythryl.org/my-Write_a_text_file.html
# TODO:  In the docs, what is a "Writer" ?
# I can't realistically convert this into a two-parameter function.
#   Basically I'd have to pass one List of Strings - the filename, and the content.
#   (This is probably not true, but I don't know any better)
#   But why do something as complex as that?  Just use the original simpler code.
fun write_file( _: Void ): Void
    =
{
  filename =  "test-write.txt";

  file = file::open_for_write filename;
  list = [ "line one\n", "line two" ];
  apply fprintf file "%s" list;

  # file::write       ( file, "There is no royal road to mathematics.\n" );
  # fprintf             file  "Mathematics is the %s of the sciences.\n" "queen";

  file::flush         file;
  file::close_output  file;

  # Display its contents.
  if    ( exists( filename ) )
        printf "%s contains:\n--v\n" filename;

        stream =  open_for_read( filename );
        list =  read_lines( stream );
        apply printf "%s" list;
        winix::file::remove_file( filename );
        print "--^\n";
  else
        printf "%s was not created!\n" filename;
  fi;
};
fun test_write_file( _: Void ): Void
    =
{
  write_file();
};
test_write_file();
